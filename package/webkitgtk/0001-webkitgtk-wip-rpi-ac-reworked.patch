diff --git a/Source/WebCore/platform/graphics/cairo/CairoUtilities.cpp b/Source/WebCore/platform/graphics/cairo/CairoUtilities.cpp
index 8d20b22..cae57b8 100644
--- a/Source/WebCore/platform/graphics/cairo/CairoUtilities.cpp
+++ b/Source/WebCore/platform/graphics/cairo/CairoUtilities.cpp
@@ -39,6 +39,9 @@
 #include <wtf/Vector.h>
 
 #if ENABLE(ACCELERATED_2D_CANVAS)
+#if PLATFORM(WAYLAND)
+#include <wayland-egl.h>
+#endif
 #include <cairo-gl.h>
 #endif
 
diff --git a/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp b/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp
index 00482ad..f5acfd1 100644
--- a/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp
+++ b/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp
@@ -45,9 +45,15 @@
 
 #if ENABLE(ACCELERATED_2D_CANVAS)
 #include "GLContext.h"
-#include "OpenGLShims.h"
 #include "TextureMapperGL.h"
 #include <cairo-gl.h>
+#if USE(OPENGL_ES_2)
+#include "OpenGLESShims.h"
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#else
+#include "OpenGLShims.h"
+#endif
 #endif
 
 using namespace std;
@@ -72,8 +78,8 @@ PassRefPtr<cairo_surface_t> createCairoGLSurface(const IntSize& size, uint32_t&
     // from a pre-existing surface.
     glGenTextures(1, &texture);
     glBindTexture(GL_TEXTURE_2D, texture);
-    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
-    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
+    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
 
diff --git a/Source/WebCore/platform/gtk/WaylandCompositor.cpp b/Source/WebCore/platform/gtk/WaylandCompositor.cpp
index d7f4c59..342ac3a 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositor.cpp
+++ b/Source/WebCore/platform/gtk/WaylandCompositor.cpp
@@ -49,13 +49,17 @@ typedef EGLBoolean (EGLAPIENTRYP PFNEGLUNBINDWAYLANDDISPLAYWL)(EGLDisplay, struc
 static PFNEGLBINDWAYLANDDISPLAYWL eglBindDisplay = nullptr;
 static PFNEGLUNBINDWAYLANDDISPLAYWL eglUnbindDisplay = nullptr;
 
-NestedBuffer* NestedBuffer::fromResource(struct wl_resource* resource)
+NestedBuffer::~NestedBuffer()
+{
+}
+
+NestedBuffer* NestedBuffer::fromResource(NestedSurface* surface, struct wl_resource* resource)
 {
     struct wl_listener* listener = wl_resource_get_destroy_listener(resource, destroyHandler);
     if (listener)
         return wl_container_of(listener, static_cast<NestedBuffer*>(nullptr), destroyListener);
 
-    return new NestedBuffer(resource);
+    return surface->createBuffer(resource);
 }
 
 void NestedBuffer::reference(NestedSurface::BufferReference* ref, NestedBuffer* buffer)
@@ -126,6 +130,16 @@ NestedSurface::~NestedSurface()
     wl_list_remove(&link);
 }
 
+void NestedSurface::setWidget(GtkWidget* widget)
+{
+    this->widget = widget;
+}
+
+NestedBuffer* NestedSurface::createBuffer(struct wl_resource* resource)
+{
+    return new NestedBuffer(resource);
+}
+
 static const struct wl_surface_interface surfaceInterface = {
     // destroy
     [](struct wl_client*, struct wl_resource* resource)
@@ -199,6 +213,7 @@ static const struct wl_wkgtk_interface wkgtkInterface = {
 
 WaylandCompositor* WaylandCompositor::instance()
 {
+    fprintf(stderr, "WaylandCompositor::instance()\n");
     static WaylandCompositor* compositor = nullptr;
     if (compositor)
         return compositor;
@@ -237,6 +252,7 @@ WaylandCompositor::~WaylandCompositor()
 
 bool WaylandCompositor::initialize()
 {
+    fprintf(stderr, "WaylandCompositor::initialize\n");
     GdkDisplay* gdkDisplay = gdk_display_manager_get_default_display(gdk_display_manager_get());
     struct wl_display* wlDisplay = gdk_wayland_display_get_wl_display(gdkDisplay);
     if (!wlDisplay)
@@ -347,7 +363,7 @@ void WaylandCompositor::setSurfaceForWidget(struct wl_client*, struct wl_resourc
             // Associate the new surface with the widget, the client is responsible
             // for destroying any previous surface created for this widget
             m_widgetHashMap.set(widget, surface);
-            surface->widget = widget;
+            surface->setWidget(widget);
             break;
         }
     }
diff --git a/Source/WebCore/platform/gtk/WaylandCompositor.h b/Source/WebCore/platform/gtk/WaylandCompositor.h
index 803959c..95c8159 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositor.h
+++ b/Source/WebCore/platform/gtk/WaylandCompositor.h
@@ -41,6 +41,7 @@
 
 namespace WebCore {
 
+struct NestedBuffer;
 class WaylandCompositor;
 
 // Nested Wayland compositor surface
@@ -48,6 +49,9 @@ struct NestedSurface {
     NestedSurface(WaylandCompositor*);
     virtual ~NestedSurface();
 
+    virtual void setWidget(GtkWidget*);
+    virtual NestedBuffer* createBuffer(struct wl_resource*);
+
     WaylandCompositor* compositor;        // Nested compositor instance
     struct NestedBuffer* buffer;          // Last attached buffer (pending buffer)
     struct wl_list frameCallbackList;     // Pending frame callback list
@@ -72,8 +76,9 @@ struct NestedBuffer {
         destroyListener.notify = destroyHandler;
         wl_resource_add_destroy_listener(resource, &destroyListener);
     }
+    virtual ~NestedBuffer();
 
-    static struct NestedBuffer* fromResource(struct wl_resource*);
+    static struct NestedBuffer* fromResource(NestedSurface*, struct wl_resource*);
     static void reference(NestedSurface::BufferReference*, struct NestedBuffer*);
     static void destroyHandler(struct wl_listener*, void*);
 
diff --git a/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.cpp b/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.cpp
index f6221c5..5b5e969 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.cpp
+++ b/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.cpp
@@ -4,7 +4,10 @@
 #if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
 #include <fcntl.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkwayland.h>
 #include <sys/time.h>
+#include <wayland-client.h>
 
 #if !defined(PFNEGLQUERYWAYLANDBUFFERWL)
 typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYWAYLANDBUFFERWL)(EGLDisplay, struct wl_resource*, EGLint, EGLint*);
@@ -28,19 +31,71 @@ namespace WebCore {
 struct NestedSurfaceDispmanX : NestedSurface {
     NestedSurfaceDispmanX(WaylandCompositor* compositor)
         : NestedSurface(compositor)
+        , subsurfaceSurface(nullptr)
+        , subsurface(nullptr)
     { }
+    // FIXME: Destroy subsurface.
     virtual ~NestedSurfaceDispmanX() { }
+
+    virtual void setWidget(GtkWidget*) override;
+    virtual NestedBuffer* createBuffer(struct wl_resource*) override;
+
+    struct wl_surface* subsurfaceSurface;
+    struct wl_subsurface* subsurface;
 };
 
+struct NestedBufferDispmanX : NestedBuffer {
+    NestedBufferDispmanX(struct wl_resource* resource)
+        : NestedBuffer(resource)
+        , clientBuffer(nullptr)
+    {
+    }
+
+    struct wl_buffer* clientBuffer;
+};
+
+void NestedSurfaceDispmanX::setWidget(GtkWidget* widget)
+{
+    NestedSurface::setWidget(widget);
+
+    WaylandCompositorDispmanX* dispmanxCompositor = static_cast<WaylandCompositorDispmanX*>(compositor);
+    subsurfaceSurface = wl_compositor_create_surface(dispmanxCompositor->wl_compositor);
+    subsurface = wl_subcompositor_get_subsurface(dispmanxCompositor->wl_subcompositor, subsurfaceSurface,
+        gdk_wayland_window_get_wl_surface(gtk_widget_get_window(widget)));
+    fprintf(stderr, "NestedSurfaceDispmanX::setWidget(): acquired subsurface %p, its surface %p\n",
+        subsurface, subsurfaceSurface);
+    wl_subsurface_set_desync(subsurface);
+
+    gtk_widget_queue_draw(widget);
+}
+
+NestedBuffer* NestedSurfaceDispmanX::createBuffer(struct wl_resource* resource)
+{
+    fprintf(stderr, "NestedSurfaceDispmanX::createBuffer resource %p, handle %d\n",
+        resource, vc_dispmanx_get_handle_from_wl_buffer(resource));
+    NestedBufferDispmanX* buffer = new NestedBufferDispmanX(resource);
+
+    EGLint width, height;
+    if (!eglQueryBuffer(compositor->eglDisplay(), resource, EGL_WIDTH, &width)
+        || !eglQueryBuffer(compositor->eglDisplay(), resource, EGL_HEIGHT, &height))
+        return nullptr;
+
+    buffer->clientBuffer = wl_dispmanx_create_proxy_buffer(static_cast<WaylandCompositorDispmanX*>(compositor)->wl_dispmanx,
+        vc_dispmanx_get_handle_from_wl_buffer(resource), width, height,
+        vc_dispmanx_get_format_from_wl_buffer(resource));
+    return buffer;
+}
+
 // Raspberry Pi flip pipe magic
 
-static uint64_t rpiGetCurrentTime()
+static uint64_t getCurrentTime()
 {
     struct timeval tv;
     gettimeofday(&tv, NULL);
     return (uint64_t)tv.tv_sec * 1000 + tv.tv_usec / 1000;
 }
 
+#if 0
 void WaylandCompositorDispmanX::rpiFlipPipeUpdateComplete(DISPMANX_UPDATE_HANDLE_T update, void* data)
 {
     WaylandCompositorDispmanX* compositor = static_cast<WaylandCompositorDispmanX*>(data);
@@ -88,25 +143,42 @@ bool WaylandCompositorDispmanX::initializeRPiFlipPipe()
 
     return true;
 }
+#endif
 
 WaylandCompositorDispmanX::WaylandCompositorDispmanX()
-    : m_dispmanxDisplay(0)
-    , m_rpiFlipPipe({ 0, 0, nullptr })
-    , m_renderer({ 0, 0, DISPMANX_NO_HANDLE, DISPMANX_NO_HANDLE, DISPMANX_NO_HANDLE })
+    : wl_registry(nullptr)
+    , wl_compositor(nullptr)
+    , wl_subcompositor(nullptr)
+    , wl_dispmanx(nullptr)
 {
 }
 
+const struct wl_registry_listener WaylandCompositorDispmanX::m_registryListener = {
+    // global
+    [](void* data, struct wl_registry* registry, uint32_t name, const char* interface, uint32_t)
+    {
+        WaylandCompositorDispmanX* compositor = static_cast<WaylandCompositorDispmanX*>(data);
+        if (strcmp(interface, "wl_compositor") == 0)
+            compositor->wl_compositor = static_cast<struct wl_compositor*>(wl_registry_bind(registry, name, &wl_compositor_interface, 3));
+        else if (strcmp(interface, "wl_subcompositor") == 0)
+            compositor->wl_subcompositor = static_cast<struct wl_subcompositor*>(wl_registry_bind(registry, name, &wl_subcompositor_interface, 1));
+        else if (strcmp(interface, "wl_dispmanx") == 0)
+            compositor->wl_dispmanx = static_cast<struct wl_dispmanx*>(wl_registry_bind(registry, name, &wl_dispmanx_interface, 1));
+    },
+
+    // global_remove
+    [](void*, struct wl_registry*, uint32_t)
+    {
+        // FIXME: if this can happen without the UI Process getting shut down we should probably
+        // destroy our cached display instance
+    }
+};
+
 void WaylandCompositorDispmanX::attachSurface(NestedSurface* surfaceBase, struct wl_client*, struct wl_resource* bufferResource, int32_t, int32_t)
 {
-    fprintf(stderr, "WaylandCompositorDispmanX::attachSurface\n");
+    // fprintf(stderr, "WaylandCompositorDispmanX::attachSurface\n");
     NestedSurfaceDispmanX* surface = static_cast<NestedSurfaceDispmanX*>(surfaceBase);
 
-    EGLint format;
-    if (!eglQueryBuffer(m_display.eglDisplay, bufferResource, EGL_TEXTURE_FORMAT, &format))
-        return;
-    if (format != EGL_TEXTURE_RGB && format != EGL_TEXTURE_RGBA)
-        return;
-
     // Remove references to any previous pending buffer for this surface
     if (surface->buffer) {
         surface->buffer = nullptr;
@@ -115,15 +187,15 @@ void WaylandCompositorDispmanX::attachSurface(NestedSurface* surfaceBase, struct
 
     // Make the new buffer the current pending buffer
     if (bufferResource) {
-        surface->buffer = NestedBuffer::fromResource(bufferResource);
+        surface->buffer = NestedBuffer::fromResource(surface, bufferResource);
         wl_signal_add(&surface->buffer->destroySignal, &surface->bufferDestroyListener);
     }
-    fprintf(stderr, "\tsurface attached\n");
+    //fprintf(stderr, "\tsurface attached\n");
 }
 
 void WaylandCompositorDispmanX::requestFrame(NestedSurface* surfaceBase, struct wl_client* client, uint32_t id)
 {
-    fprintf(stderr, "WaylandCompositorDispmanX::requestFrame\n");
+    // fprintf(stderr, "WaylandCompositorDispmanX::requestFrame\n");
     NestedSurfaceDispmanX* surface = static_cast<NestedSurfaceDispmanX*>(surfaceBase);
 
     NestedFrameCallback* callback = new NestedFrameCallback(wl_resource_create(client, &wl_callback_interface, 1, id));
@@ -135,12 +207,15 @@ void WaylandCompositorDispmanX::requestFrame(NestedSurface* surfaceBase, struct
         }
     );
     wl_list_insert(surface->frameCallbackList.prev, &callback->link);
-    fprintf(stderr, "\tframe requested\n");
+    //fprintf(stderr, "\tframe requested\n");
 }
 
+static uint64_t lastCommitPrint = 0;
+static int commitCount = 0;
+
 void WaylandCompositorDispmanX::commitSurface(NestedSurface* surfaceBase, struct wl_client*)
 {
-    fprintf(stderr, "WaylandCompositorDispmanX::commitSurface %p\n", surfaceBase);
+    // fprintf(stderr, "WaylandCompositorDispmanX::commitSurface %p\n", surfaceBase);
     NestedSurfaceDispmanX* surface = static_cast<NestedSurfaceDispmanX*>(surfaceBase);
     if (!surface)
         return;
@@ -148,13 +223,17 @@ void WaylandCompositorDispmanX::commitSurface(NestedSurface* surfaceBase, struct
     // Make the pending buffer current 
     NestedBuffer::reference(&surface->bufferRef, surface->buffer);
 
-    EGLint width, height;
-    EGLDisplay eglDisplay = m_display.eglDisplay;
-    if (!eglQueryBuffer(eglDisplay, surface->buffer->resource, EGL_WIDTH, &width)
-        || !eglQueryBuffer(eglDisplay, surface->buffer->resource, EGL_HEIGHT, &height))
-        return;
+    GtkAllocation allocation;
+    gtk_widget_get_allocation(surface->widget, &allocation);
+    wl_subsurface_set_position(surface->subsurface, allocation.x, allocation.y);
 
-    gtk_widget_set_size_request(surface->widget, width, height);
+    wl_surface_frame(surface->subsurfaceSurface);
+    wl_surface_attach(surface->subsurfaceSurface,
+        static_cast<NestedBufferDispmanX*>(surface->buffer)->clientBuffer, 0, 0);
+    wl_surface_commit(surface->subsurfaceSurface);
+
+    wl_list_remove(&surface->bufferDestroyListener.link);
+    surface->buffer = NULL;
 
     // Process frame callbacks for this surface so the client can render a new frame
     NestedFrameCallback *nc, *next;
@@ -165,15 +244,67 @@ void WaylandCompositorDispmanX::commitSurface(NestedSurface* surfaceBase, struct
 
     wl_list_init(&surface->frameCallbackList);
     wl_display_flush_clients(m_display.childDisplay);
-    fprintf(stderr, "\tsurface committed\n");
+    //fprintf(stderr, "\tsurface committed\n");
+
+    commitCount++;
+    uint64_t commitTime = getCurrentTime();
+    if (commitTime - lastCommitPrint >= 5000) {
+        if (lastCommitPrint == 0) {
+            lastCommitPrint = commitTime;
+            return;
+        }
+
+        g_print ("Committed %d times in the last 5 seconds - CPS %f\n", commitCount, commitCount / 5.0);
+        lastCommitPrint = commitTime;
+        commitCount = 0;
+    }
 }
 
+static uint64_t lastRenderPrint = 0;
+static int renderCount = 0;
+
 void WaylandCompositorDispmanX::render(WaylandCompositor::RenderingContext& contextBase)
 {
-    fprintf(stderr, "WaylandCompositorDispmanX::render\n");
     ASSERT(contextBase.type == WaylandCompositor::DispmanX);
     RenderingContext& context = static_cast<RenderingContext&>(contextBase);
+    g_print("WaylandCompositorDispmanX::render\n");
+
+    NestedSurface* targetSurface = nullptr;
+    NestedSurface* surface, * nextSurface;
+    wl_list_for_each_safe(surface, nextSurface, &m_surfaces, link) {
+        // FIXME: The GtkWidget should be guaranteed.
+        if (surface->widget == context.widget) {
+            targetSurface = surface;
+            break;
+        }
+    }
+
+    if (!targetSurface || !targetSurface->buffer)
+        return;
+
+    GtkAllocation allocation;
+    gtk_widget_get_allocation(targetSurface->widget, &allocation);
+
+    NestedSurfaceDispmanX* dispmanxSurface = static_cast<NestedSurfaceDispmanX*>(targetSurface);
+    wl_subsurface_set_position(dispmanxSurface->subsurface, allocation.x, allocation.y);
+
+    wl_surface_attach(dispmanxSurface->subsurfaceSurface,
+        static_cast<NestedBufferDispmanX*>(targetSurface->buffer)->clientBuffer, 0, 0);
+    wl_surface_commit(dispmanxSurface->subsurfaceSurface);
+
+    wl_list_remove(&targetSurface->bufferDestroyListener.link);
+    targetSurface->buffer = NULL;
 
+    // Process frame callbacks for this surface so the client can render a new frame
+    NestedFrameCallback *nc, *next;
+    wl_list_for_each_safe(nc, next, &surface->frameCallbackList, link) {
+        wl_callback_send_done(nc->resource, 0);
+        wl_resource_destroy(nc->resource);
+    }
+
+    wl_list_init(&surface->frameCallbackList);
+    wl_display_flush_clients(m_display.childDisplay);
+#if 0
     static VC_DISPMANX_ALPHA_T alpha = {
         static_cast<DISPMANX_FLAGS_ALPHA_T>(DISPMANX_FLAGS_ALPHA_FROM_SOURCE | DISPMANX_FLAGS_ALPHA_FIXED_ALL_PIXELS),
         255, 0
@@ -232,8 +363,20 @@ void WaylandCompositorDispmanX::render(WaylandCompositor::RenderingContext& cont
 
     m_renderer.update = DISPMANX_NO_HANDLE;
     m_renderer.resource = DISPMANX_NO_HANDLE;
+#endif
+
+    renderCount++;
+    uint64_t renderTime = getCurrentTime();
+    if (renderTime - lastRenderPrint >= 5000) {
+        if (lastRenderPrint == 0) {
+            lastRenderPrint = renderTime;
+            return;
+        }
 
-    fprintf(stderr, "\trendered\n");
+        g_print ("Rendered %d times in the last 5 seconds - RPS %f\n", renderCount, renderCount / 5.0);
+        lastRenderPrint = renderTime;
+        renderCount = 0;
+    }
 }
 
 bool WaylandCompositorDispmanX::initialize()
@@ -243,6 +386,17 @@ bool WaylandCompositorDispmanX::initialize()
     if (!WaylandCompositor::initialize())
         return false;
 
+    fprintf(stderr, "WaylandCompositorDispmanX::initialize\n");
+    wl_registry = wl_display_get_registry(m_display.wlDisplay);
+    fprintf(stderr, "\tdisplay %p, registry %p\n", m_display.wlDisplay, wl_registry);
+    wl_registry_add_listener(wl_registry, &m_registryListener, this);
+    fprintf(stderr, "\tdispatching\n");
+    wl_display_dispatch(m_display.wlDisplay);
+
+    fprintf(stderr, "WaylandCompositorDispmanX::initialize(): compositor %p, subcompositor %p, dispmanx %p\n",
+        wl_compositor, wl_subcompositor, wl_dispmanx);
+
+#if 0
     if (!initializeRPiFlipPipe()) {
         g_warning("Could not initalize RPi flip pipe");
         return false;
@@ -253,6 +407,7 @@ bool WaylandCompositorDispmanX::initialize()
         g_warning("Could not open DispmanX display");
         return false;
     }
+#endif
 
     return true;
 }
@@ -289,6 +444,7 @@ NestedSurface* WaylandCompositorDispmanX::createNestedSurface()
     return new NestedSurfaceDispmanX(this);
 }
 
+#if 0
 void WaylandCompositorDispmanX::queueWidgetRedraw()
 {
     fprintf(stderr, "WaylandCompositorDispmanX::queueWidgetRedraw\n");
@@ -300,6 +456,7 @@ void WaylandCompositorDispmanX::queueWidgetRedraw()
     }
     fprintf(stderr, "\tqueued\n");
 }
+#endif
 
 } // namespace WebCore
 
diff --git a/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.h b/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.h
index 72fa6f3..9d1ef26 100644
--- a/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.h
+++ b/Source/WebCore/platform/gtk/WaylandCompositorDispmanX.h
@@ -5,11 +5,14 @@
 
 #if USE(EGL) && PLATFORM(WAYLAND) && defined(GDK_WINDOWING_WAYLAND)
 
+#include "wayland-dispmanx-client-protocol.h"
 #define BUILD_WAYLAND
 #include <bcm_host.h>
 
 namespace WebCore {
 
+struct NestedSurfaceDispmanX;
+
 class WaylandCompositorDispmanX : public WaylandCompositor {
 public:
     WaylandCompositorDispmanX();
@@ -29,10 +32,13 @@ public:
     virtual void render(WaylandCompositor::RenderingContext&) override;
 
 private:
+    friend struct NestedSurfaceDispmanX;
+
     virtual bool initialize() override;
     virtual bool initializeEGL() override;
     virtual NestedSurface* createNestedSurface() override;
 
+#if 0
     bool initializeRPiFlipPipe();
     static void rpiFlipPipeUpdateComplete(DISPMANX_UPDATE_HANDLE_T, void*);
     static int rpiFlipPipeHandler(int, uint32_t, void*);
@@ -50,6 +56,14 @@ private:
         DISPMANX_RESOURCE_HANDLE_T resource;
         DISPMANX_ELEMENT_HANDLE_T element;
     } m_renderer;
+#endif
+
+    static const struct wl_registry_listener m_registryListener;
+
+    struct wl_registry* wl_registry;
+    struct wl_compositor* wl_compositor;
+    struct wl_subcompositor* wl_subcompositor;
+    struct wl_dispmanx* wl_dispmanx;
 };
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/gtk/wayland-dispmanx-client-protocol.h b/Source/WebCore/platform/gtk/wayland-dispmanx-client-protocol.h
new file mode 100644
index 0000000..c08a998
--- /dev/null
+++ b/Source/WebCore/platform/gtk/wayland-dispmanx-client-protocol.h
@@ -0,0 +1,192 @@
+/* 
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2010-2011 Intel Corporation
+ * Copyright © 2013 Raspberry Pi Foundation
+ * 
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ * 
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ */
+
+#ifndef DISPMANX_CLIENT_PROTOCOL_H
+#define DISPMANX_CLIENT_PROTOCOL_H
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-client.h"
+
+struct wl_client;
+struct wl_resource;
+
+struct wl_dispmanx;
+
+extern const struct wl_interface wl_dispmanx_interface;
+
+#ifndef WL_DISPMANX_ERROR_ENUM
+#define WL_DISPMANX_ERROR_ENUM
+enum wl_dispmanx_error {
+	WL_DISPMANX_ERROR_ALLOC_FAILED = 0,
+	WL_DISPMANX_ERROR_INVALID_FORMAT = 1,
+};
+#endif /* WL_DISPMANX_ERROR_ENUM */
+
+#ifndef WL_DISPMANX_FORMAT_ENUM
+#define WL_DISPMANX_FORMAT_ENUM
+enum wl_dispmanx_format {
+	WL_DISPMANX_FORMAT_C8 = 0x20203843,
+	WL_DISPMANX_FORMAT_RGB332 = 0x38424752,
+	WL_DISPMANX_FORMAT_BGR233 = 0x38524742,
+	WL_DISPMANX_FORMAT_XRGB4444 = 0x32315258,
+	WL_DISPMANX_FORMAT_XBGR4444 = 0x32314258,
+	WL_DISPMANX_FORMAT_RGBX4444 = 0x32315852,
+	WL_DISPMANX_FORMAT_BGRX4444 = 0x32315842,
+	WL_DISPMANX_FORMAT_ARGB4444 = 0x32315241,
+	WL_DISPMANX_FORMAT_ABGR4444 = 0x32314241,
+	WL_DISPMANX_FORMAT_RGBA4444 = 0x32314152,
+	WL_DISPMANX_FORMAT_BGRA4444 = 0x32314142,
+	WL_DISPMANX_FORMAT_XRGB1555 = 0x35315258,
+	WL_DISPMANX_FORMAT_XBGR1555 = 0x35314258,
+	WL_DISPMANX_FORMAT_RGBX5551 = 0x35315852,
+	WL_DISPMANX_FORMAT_BGRX5551 = 0x35315842,
+	WL_DISPMANX_FORMAT_ARGB1555 = 0x35315241,
+	WL_DISPMANX_FORMAT_ABGR1555 = 0x35314241,
+	WL_DISPMANX_FORMAT_RGBA5551 = 0x35314152,
+	WL_DISPMANX_FORMAT_BGRA5551 = 0x35314142,
+	WL_DISPMANX_FORMAT_RGB565 = 0x36314752,
+	WL_DISPMANX_FORMAT_BGR565 = 0x36314742,
+	WL_DISPMANX_FORMAT_RGB888 = 0x34324752,
+	WL_DISPMANX_FORMAT_BGR888 = 0x34324742,
+	WL_DISPMANX_FORMAT_XRGB8888 = 0x34325258,
+	WL_DISPMANX_FORMAT_XBGR8888 = 0x34324258,
+	WL_DISPMANX_FORMAT_RGBX8888 = 0x34325852,
+	WL_DISPMANX_FORMAT_BGRX8888 = 0x34325842,
+	WL_DISPMANX_FORMAT_ARGB8888 = 0x34325241,
+	WL_DISPMANX_FORMAT_ABGR8888 = 0x34324241,
+	WL_DISPMANX_FORMAT_RGBA8888 = 0x34324152,
+	WL_DISPMANX_FORMAT_BGRA8888 = 0x34324142,
+	WL_DISPMANX_FORMAT_XRGB2101010 = 0x30335258,
+	WL_DISPMANX_FORMAT_XBGR2101010 = 0x30334258,
+	WL_DISPMANX_FORMAT_RGBX1010102 = 0x30335852,
+	WL_DISPMANX_FORMAT_BGRX1010102 = 0x30335842,
+	WL_DISPMANX_FORMAT_ARGB2101010 = 0x30335241,
+	WL_DISPMANX_FORMAT_ABGR2101010 = 0x30334241,
+	WL_DISPMANX_FORMAT_RGBA1010102 = 0x30334152,
+	WL_DISPMANX_FORMAT_BGRA1010102 = 0x30334142,
+	WL_DISPMANX_FORMAT_YUYV = 0x56595559,
+	WL_DISPMANX_FORMAT_YVYU = 0x55595659,
+	WL_DISPMANX_FORMAT_UYVY = 0x59565955,
+	WL_DISPMANX_FORMAT_VYUY = 0x59555956,
+	WL_DISPMANX_FORMAT_AYUV = 0x56555941,
+	WL_DISPMANX_FORMAT_NV12 = 0x3231564e,
+	WL_DISPMANX_FORMAT_NV21 = 0x3132564e,
+	WL_DISPMANX_FORMAT_NV16 = 0x3631564e,
+	WL_DISPMANX_FORMAT_NV61 = 0x3136564e,
+	WL_DISPMANX_FORMAT_YUV410 = 0x39565559,
+	WL_DISPMANX_FORMAT_YVU410 = 0x39555659,
+	WL_DISPMANX_FORMAT_YUV411 = 0x31315559,
+	WL_DISPMANX_FORMAT_YVU411 = 0x31315659,
+	WL_DISPMANX_FORMAT_YUV420 = 0x32315559,
+	WL_DISPMANX_FORMAT_YVU420 = 0x32315659,
+	WL_DISPMANX_FORMAT_YUV422 = 0x36315559,
+	WL_DISPMANX_FORMAT_YVU422 = 0x36315659,
+	WL_DISPMANX_FORMAT_YUV444 = 0x34325559,
+	WL_DISPMANX_FORMAT_YVU444 = 0x34325659,
+};
+#endif /* WL_DISPMANX_FORMAT_ENUM */
+
+struct wl_dispmanx_listener {
+	/**
+	 * format - (none)
+	 * @format: (none)
+	 */
+	void (*format)(void *data,
+		       struct wl_dispmanx *wl_dispmanx,
+		       uint32_t format);
+	/**
+	 * buffer_allocated - (none)
+	 * @buffer: (none)
+	 * @handle: (none)
+	 */
+	void (*buffer_allocated)(void *data,
+				 struct wl_dispmanx *wl_dispmanx,
+				 struct wl_buffer *buffer,
+				 uint32_t handle);
+};
+
+static inline int
+wl_dispmanx_add_listener(struct wl_dispmanx *wl_dispmanx,
+			 const struct wl_dispmanx_listener *listener, void *data)
+{
+	return wl_proxy_add_listener((struct wl_proxy *) wl_dispmanx,
+				     (void (**)(void)) listener, data);
+}
+
+#define WL_DISPMANX_CREATE_BUFFER	0
+#define WL_DISPMANX_CREATE_PROXY_BUFFER	1
+
+static inline void
+wl_dispmanx_set_user_data(struct wl_dispmanx *wl_dispmanx, void *user_data)
+{
+	wl_proxy_set_user_data((struct wl_proxy *) wl_dispmanx, user_data);
+}
+
+static inline void *
+wl_dispmanx_get_user_data(struct wl_dispmanx *wl_dispmanx)
+{
+	return wl_proxy_get_user_data((struct wl_proxy *) wl_dispmanx);
+}
+
+static inline void
+wl_dispmanx_destroy(struct wl_dispmanx *wl_dispmanx)
+{
+	wl_proxy_destroy((struct wl_proxy *) wl_dispmanx);
+}
+
+static inline struct wl_buffer *
+wl_dispmanx_create_buffer(struct wl_dispmanx *wl_dispmanx, int32_t width, int32_t height, uint32_t stride, uint32_t buffer_height, uint32_t format)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_dispmanx,
+			 WL_DISPMANX_CREATE_BUFFER, &wl_buffer_interface, NULL, width, height, stride, buffer_height, format);
+
+	return (struct wl_buffer *) id;
+}
+
+static inline struct wl_buffer *
+wl_dispmanx_create_proxy_buffer(struct wl_dispmanx *wl_dispmanx, uint32_t handle, int32_t width, int32_t height, uint32_t format)
+{
+	struct wl_proxy *id;
+
+	id = wl_proxy_marshal_constructor((struct wl_proxy *) wl_dispmanx,
+			 WL_DISPMANX_CREATE_PROXY_BUFFER, &wl_buffer_interface, NULL, handle, width, height, format);
+
+	return (struct wl_buffer *) id;
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git a/Source/WebCore/platform/gtk/wayland-dispmanx-server-protocol.h b/Source/WebCore/platform/gtk/wayland-dispmanx-server-protocol.h
new file mode 100644
index 0000000..f6c5a9b
--- /dev/null
+++ b/Source/WebCore/platform/gtk/wayland-dispmanx-server-protocol.h
@@ -0,0 +1,172 @@
+/* 
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2010-2011 Intel Corporation
+ * Copyright © 2013 Raspberry Pi Foundation
+ * 
+ * Permission to use, copy, modify, distribute, and sell this
+ * software and its documentation for any purpose is hereby granted
+ * without fee, provided that\n the above copyright notice appear in
+ * all copies and that both that copyright notice and this permission
+ * notice appear in supporting documentation, and that the name of
+ * the copyright holders not be used in advertising or publicity
+ * pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no
+ * representations about the suitability of this software for any
+ * purpose.  It is provided "as is" without express or implied
+ * warranty.
+ * 
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
+ * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
+ * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
+ * THIS SOFTWARE.
+ */
+
+#ifndef DISPMANX_SERVER_PROTOCOL_H
+#define DISPMANX_SERVER_PROTOCOL_H
+
+#ifdef  __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+#include <stddef.h>
+#include "wayland-util.h"
+
+struct wl_client;
+struct wl_resource;
+
+struct wl_dispmanx;
+
+extern const struct wl_interface wl_dispmanx_interface;
+
+#ifndef WL_DISPMANX_ERROR_ENUM
+#define WL_DISPMANX_ERROR_ENUM
+enum wl_dispmanx_error {
+	WL_DISPMANX_ERROR_ALLOC_FAILED = 0,
+	WL_DISPMANX_ERROR_INVALID_FORMAT = 1,
+};
+#endif /* WL_DISPMANX_ERROR_ENUM */
+
+#ifndef WL_DISPMANX_FORMAT_ENUM
+#define WL_DISPMANX_FORMAT_ENUM
+enum wl_dispmanx_format {
+	WL_DISPMANX_FORMAT_C8 = 0x20203843,
+	WL_DISPMANX_FORMAT_RGB332 = 0x38424752,
+	WL_DISPMANX_FORMAT_BGR233 = 0x38524742,
+	WL_DISPMANX_FORMAT_XRGB4444 = 0x32315258,
+	WL_DISPMANX_FORMAT_XBGR4444 = 0x32314258,
+	WL_DISPMANX_FORMAT_RGBX4444 = 0x32315852,
+	WL_DISPMANX_FORMAT_BGRX4444 = 0x32315842,
+	WL_DISPMANX_FORMAT_ARGB4444 = 0x32315241,
+	WL_DISPMANX_FORMAT_ABGR4444 = 0x32314241,
+	WL_DISPMANX_FORMAT_RGBA4444 = 0x32314152,
+	WL_DISPMANX_FORMAT_BGRA4444 = 0x32314142,
+	WL_DISPMANX_FORMAT_XRGB1555 = 0x35315258,
+	WL_DISPMANX_FORMAT_XBGR1555 = 0x35314258,
+	WL_DISPMANX_FORMAT_RGBX5551 = 0x35315852,
+	WL_DISPMANX_FORMAT_BGRX5551 = 0x35315842,
+	WL_DISPMANX_FORMAT_ARGB1555 = 0x35315241,
+	WL_DISPMANX_FORMAT_ABGR1555 = 0x35314241,
+	WL_DISPMANX_FORMAT_RGBA5551 = 0x35314152,
+	WL_DISPMANX_FORMAT_BGRA5551 = 0x35314142,
+	WL_DISPMANX_FORMAT_RGB565 = 0x36314752,
+	WL_DISPMANX_FORMAT_BGR565 = 0x36314742,
+	WL_DISPMANX_FORMAT_RGB888 = 0x34324752,
+	WL_DISPMANX_FORMAT_BGR888 = 0x34324742,
+	WL_DISPMANX_FORMAT_XRGB8888 = 0x34325258,
+	WL_DISPMANX_FORMAT_XBGR8888 = 0x34324258,
+	WL_DISPMANX_FORMAT_RGBX8888 = 0x34325852,
+	WL_DISPMANX_FORMAT_BGRX8888 = 0x34325842,
+	WL_DISPMANX_FORMAT_ARGB8888 = 0x34325241,
+	WL_DISPMANX_FORMAT_ABGR8888 = 0x34324241,
+	WL_DISPMANX_FORMAT_RGBA8888 = 0x34324152,
+	WL_DISPMANX_FORMAT_BGRA8888 = 0x34324142,
+	WL_DISPMANX_FORMAT_XRGB2101010 = 0x30335258,
+	WL_DISPMANX_FORMAT_XBGR2101010 = 0x30334258,
+	WL_DISPMANX_FORMAT_RGBX1010102 = 0x30335852,
+	WL_DISPMANX_FORMAT_BGRX1010102 = 0x30335842,
+	WL_DISPMANX_FORMAT_ARGB2101010 = 0x30335241,
+	WL_DISPMANX_FORMAT_ABGR2101010 = 0x30334241,
+	WL_DISPMANX_FORMAT_RGBA1010102 = 0x30334152,
+	WL_DISPMANX_FORMAT_BGRA1010102 = 0x30334142,
+	WL_DISPMANX_FORMAT_YUYV = 0x56595559,
+	WL_DISPMANX_FORMAT_YVYU = 0x55595659,
+	WL_DISPMANX_FORMAT_UYVY = 0x59565955,
+	WL_DISPMANX_FORMAT_VYUY = 0x59555956,
+	WL_DISPMANX_FORMAT_AYUV = 0x56555941,
+	WL_DISPMANX_FORMAT_NV12 = 0x3231564e,
+	WL_DISPMANX_FORMAT_NV21 = 0x3132564e,
+	WL_DISPMANX_FORMAT_NV16 = 0x3631564e,
+	WL_DISPMANX_FORMAT_NV61 = 0x3136564e,
+	WL_DISPMANX_FORMAT_YUV410 = 0x39565559,
+	WL_DISPMANX_FORMAT_YVU410 = 0x39555659,
+	WL_DISPMANX_FORMAT_YUV411 = 0x31315559,
+	WL_DISPMANX_FORMAT_YVU411 = 0x31315659,
+	WL_DISPMANX_FORMAT_YUV420 = 0x32315559,
+	WL_DISPMANX_FORMAT_YVU420 = 0x32315659,
+	WL_DISPMANX_FORMAT_YUV422 = 0x36315559,
+	WL_DISPMANX_FORMAT_YVU422 = 0x36315659,
+	WL_DISPMANX_FORMAT_YUV444 = 0x34325559,
+	WL_DISPMANX_FORMAT_YVU444 = 0x34325659,
+};
+#endif /* WL_DISPMANX_FORMAT_ENUM */
+
+struct wl_dispmanx_interface {
+	/**
+	 * create_buffer - (none)
+	 * @id: (none)
+	 * @width: (none)
+	 * @height: (none)
+	 * @stride: (none)
+	 * @buffer_height: (none)
+	 * @format: (none)
+	 */
+	void (*create_buffer)(struct wl_client *client,
+			      struct wl_resource *resource,
+			      uint32_t id,
+			      int32_t width,
+			      int32_t height,
+			      uint32_t stride,
+			      uint32_t buffer_height,
+			      uint32_t format);
+	/**
+	 * create_proxy_buffer - (none)
+	 * @id: (none)
+	 * @handle: (none)
+	 * @width: (none)
+	 * @height: (none)
+	 * @format: (none)
+	 */
+	void (*create_proxy_buffer)(struct wl_client *client,
+				    struct wl_resource *resource,
+				    uint32_t id,
+				    uint32_t handle,
+				    int32_t width,
+				    int32_t height,
+				    uint32_t format);
+};
+
+#define WL_DISPMANX_FORMAT	0
+#define WL_DISPMANX_BUFFER_ALLOCATED	1
+
+static inline void
+wl_dispmanx_send_format(struct wl_resource *resource_, uint32_t format)
+{
+	wl_resource_post_event(resource_, WL_DISPMANX_FORMAT, format);
+}
+
+static inline void
+wl_dispmanx_send_buffer_allocated(struct wl_resource *resource_, struct wl_resource *buffer, uint32_t handle)
+{
+	wl_resource_post_event(resource_, WL_DISPMANX_BUFFER_ALLOCATED, buffer, handle);
+}
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif
diff --git a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
index f2ebcb4..fff7fdc 100644
--- a/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
+++ b/Source/WebKit2/WebProcess/WebPage/gtk/LayerTreeHostGtk.cpp
@@ -181,7 +181,7 @@ void LayerTreeHostGtk::initialize()
     // The creation of the TextureMapper needs an active OpenGL context.
     context->makeContextCurrent();
 
-    m_textureMapper = TextureMapperGL::create();
+    m_textureMapper = TextureMapper::create(TextureMapper::OpenGLMode);
     static_cast<TextureMapperGL*>(m_textureMapper.get())->setEnableEdgeDistanceAntialiasing(true);
     toTextureMapperLayer(m_rootLayer.get())->setTextureMapper(m_textureMapper.get());
 
diff --git a/Source/autotools/FindDependencies.m4 b/Source/autotools/FindDependencies.m4
index 97edbac..c32915f 100644
--- a/Source/autotools/FindDependencies.m4
+++ b/Source/autotools/FindDependencies.m4
@@ -464,7 +464,8 @@ AC_SUBST([OPENGL_LIBS])
 
 enable_accelerated_canvas=no
 if test "$enable_accelerated_compositing" = "yes" && test "$found_opengl" = "yes"; then
-    CAIRO_GL_LIBS="cairo-gl"
+    # FIXME: Hah.
+    CAIRO_GL_LIBS="cairo-egl"
     if test "$enable_glx" = "yes"; then
         CAIRO_GL_LIBS="$CAIRO_GL_LIBS cairo-glx"
     fi
