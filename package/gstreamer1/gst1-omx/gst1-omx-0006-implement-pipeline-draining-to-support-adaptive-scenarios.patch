From 45c1e7355892423aa9eebc94ec04a23fb5b62c75 Mon Sep 17 00:00:00 2001
From: Josep Torra <n770galaxy@gmail.com>
Date: Mon, 10 Mar 2014 16:43:50 +0000
Subject: omxvideodec: Implement pipeline draining to support adaptive scenarios

When draining due a format change and eglimage is used also drain the
pipeline to reclaim back all buffers.
---
diff --git a/examples/egl/testegl.c b/examples/egl/testegl.c
index 147a35e..d784566 100644
--- a/examples/egl/testegl.c
+++ b/examples/egl/testegl.c
@@ -1248,7 +1248,8 @@ query_cb (GstPad * pad, GstPadProbeInfo * info, gpointer user_data)
   GstQuery *query = GST_PAD_PROBE_INFO_QUERY (info);
 
   switch (GST_QUERY_TYPE (query)) {
-    case GST_QUERY_ALLOCATION:{
+    case GST_QUERY_ALLOCATION:
+    {
       GstBufferPool *pool;
       GstStructure *config;
       GstCaps *caps;
@@ -1351,8 +1352,13 @@ query_cb (GstPad * pad, GstPadProbeInfo * info, gpointer user_data)
 
       GST_DEBUG ("done alocation");
       return GST_PAD_PROBE_OK;
+      break;
     }
+    case GST_QUERY_DRAIN:
+    {
+      flush_internal (state);
       break;
+    }
     default:
       break;
   }
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 936fe5d..2ec77b9 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -1445,6 +1445,12 @@ eos:
   {
     g_mutex_lock (&self->drain_lock);
     if (self->draining) {
+#if defined (USE_OMX_TARGET_RPI) && defined (HAVE_GST_EGL)
+      if (self->eglimage) {
+        gst_pad_peer_query (GST_VIDEO_DECODER_SRC_PAD (self),
+            gst_query_new_drain ());
+      }
+#endif
       GST_DEBUG_OBJECT (self, "Drained");
       self->draining = FALSE;
       g_cond_broadcast (&self->drain_cond);
@@ -1759,15 +1765,9 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
     GST_DEBUG_OBJECT (self, "Need to disable and drain decoder");
 
     gst_omx_video_dec_drain (self, FALSE);
+    gst_omx_video_dec_flush (decoder);
     gst_omx_port_set_flushing (out_port, 5 * GST_SECOND, TRUE);
 
-    /* Wait until the srcpad loop is finished,
-     * unlock GST_VIDEO_DECODER_STREAM_LOCK to prevent deadlocks
-     * caused by using this lock from inside the loop function */
-    GST_VIDEO_DECODER_STREAM_UNLOCK (self);
-    gst_pad_stop_task (GST_VIDEO_DECODER_SRC_PAD (decoder));
-    GST_VIDEO_DECODER_STREAM_LOCK (self);
-
     if (klass->cdata.hacks & GST_OMX_HACK_NO_COMPONENT_RECONFIGURE) {
       GST_VIDEO_DECODER_STREAM_UNLOCK (self);
       gst_omx_video_dec_stop (GST_VIDEO_DECODER (self));
@@ -1929,13 +1929,7 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
     return FALSE;
   }
 
-  /* Start the srcpad loop again */
-  GST_DEBUG_OBJECT (self, "Starting task again");
-
   self->downstream_flow_ret = GST_FLOW_OK;
-  gst_pad_start_task (GST_VIDEO_DECODER_SRC_PAD (self),
-      (GstTaskFunction) gst_omx_video_dec_loop, decoder, NULL);
-
   return TRUE;
 }
 
--
cgit v0.9.0.2-2-gbebe
